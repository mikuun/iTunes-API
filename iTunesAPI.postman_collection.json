{
	"info": {
		"_postman_id": "a13ab280-1a4e-4d87-82d9-a28212867894",
		"name": "iTunes API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Search/lookup sequence",
			"item": [
				{
					"name": "Search for artist and save variable artistId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"const queryString = pm.variables.replaceIn(pm.request.url.query.toString());\r",
									"const queryName = queryString.slice(45, -10);\r",
									"\r",
									"if (resultData.length < 200) {\r",
									"    postman.setNextRequest(\"Search for artist and save variable artistId DEV\");\r",
									"} else {\r",
									"    const amgFound = resultData.filter((result) => result.amgArtistId);\r",
									"    console.log(amgFound);\r",
									"\r",
									"    pm.test(\"Limit 250 returns resultCount: 200\", () => {\r",
									"        pm.expect(jsonData[\"resultCount\"]).to.eql(200);\r",
									"    });\r",
									"    pm.test(\"Limit 250 returns results with length 200\", () => {\r",
									"        pm.expect(resultData.length).to.eql(200);\r",
									"    });\r",
									"    pm.test(\"wrapperType is artist\", () => {\r",
									"        pm.expect(resultData[0].wrapperType).to.eql(\"artist\");\r",
									"    });\r",
									"    pm.test(\"artistName include search term\", () => { \r",
									"        //TODO: a bit flaky\r",
									"        pm.expect(resultData[0].artistName.toLowerCase()).to.include(queryName.toLowerCase());\r",
									"    });\r",
									"\r",
									"    /* Set iTunes Artist ID variable */\r",
									"    pm.globals.set(\"artistID\", amgFound[0].artistId);\r",
									"    pm.globals.set(\"queryName\", queryName);\r",
									"}   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?entity=musicArtist&attribute=artistTerm&term={{$randomFirstName}}&limit=250",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "entity",
									"value": "musicArtist"
								},
								{
									"key": "attribute",
									"value": "artistTerm"
								},
								{
									"key": "term",
									"value": "{{$randomFirstName}}"
								},
								{
									"key": "limit",
									"value": "250"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup iTunes Artist ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"const artistID = pm.globals.get(\"artistID\");\r",
									"const amgFound = resultData.filter((result) => result.amgArtistId);\r",
									"\r",
									"pm.test(\"Limit 5 returns resultCount: 6 (5 songs + 1 artist)\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.eql(6);\r",
									"});\r",
									"pm.test(\"Limit 5 returns results with length 6 (5 songs + 1 artist)\", () => {\r",
									"    pm.expect(resultData.length).to.eql(6);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct artist ID is returned\", () => {\r",
									"  pm.expect(resultData[0].artistId).to.eql(artistID);\r",
									"});\r",
									"pm.test(\"WrapperType for first object is artist\", () => {\r",
									"  pm.expect(resultData[0].wrapperType).to.eql(\"artist\");\r",
									"});\r",
									"pm.test(\"WrapperType for second object is track\", () => {\r",
									"  pm.expect(resultData[1].wrapperType).to.eql(\"track\");\r",
									"});\r",
									"\r",
									"if (amgFound.length == 0) {\r",
									"    postman.setNextRequest(\"Search for artist and save variable artistId\");\r",
									"} else {\r",
									"    /* Set AMG Artist ID variable */\r",
									"    pm.globals.set(\"amgID\", resultData[0].amgArtistId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLLookup}}?id={{artistID}}&entity=song&limit=5&sort=top",
							"host": [
								"{{baseURLLookup}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{artistID}}"
								},
								{
									"key": "entity",
									"value": "song"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "sort",
									"value": "top"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup AMG Artist ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resultData = pm.response.json().results[0];\r",
									"const amgID = pm.globals.get(\"amgID\");\r",
									"\r",
									"pm.test(\"Correct AMG artist ID is returned\", () => {\r",
									"  pm.expect(resultData.amgArtistId).to.eql(amgID);\r",
									"});\r",
									"pm.test(\"WrapperType is artist\", () => {\r",
									"  pm.expect(resultData.wrapperType).to.eql(\"artist\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLLookup}}?amgArtistId={{amgID}}&entity=album&limit=5",
							"host": [
								"{{baseURLLookup}}"
							],
							"query": [
								{
									"key": "amgArtistId",
									"value": "{{amgID}}"
								},
								{
									"key": "entity",
									"value": "album"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "entity",
									"value": "song",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "recent",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Response datatype is object\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Limits",
			"item": [
				{
					"name": "Verify limits: Minimum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = jsonData.results;\r",
									"\r",
									"\r",
									"pm.test(\"Limit=1 returns resultCount: 1\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Limit=1 returns results with length 1\", () => {\r",
									"    pm.expect(resultData.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"limit\", 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?country={{country}}&entity={{entity}}&limit={{limit}}&term={{searchTerm}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country}}"
								},
								{
									"key": "entity",
									"value": "{{entity}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "term",
									"value": "{{searchTerm}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify limits: Maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = jsonData.results;\r",
									"\r",
									"pm.test(\"Limit=200 returns resultCount: 200\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limit=200 returns results with length 200\", () => {\r",
									"    pm.expect(resultData.length).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"limit\", 200);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?country={{country}}&entity={{entity}}&limit={{limit}}&term={{searchTerm}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country}}"
								},
								{
									"key": "entity",
									"value": "{{entity}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "term",
									"value": "{{searchTerm}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify limits: Over range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = jsonData.results;\r",
									"\r",
									"pm.test(\"Limit=250 returns resultCount: 200\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limit=250 returns results with length 200\", () => {\r",
									"    pm.expect(resultData.length).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"limit\", 250);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?country={{country}}&entity={{entity}}&limit={{limit}}&term={{searchTerm}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country}}"
								},
								{
									"key": "entity",
									"value": "{{entity}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "term",
									"value": "{{searchTerm}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify limits: Not a number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = jsonData.results;\r",
									"\r",
									"pm.test(\"Limit=NaN returns resultCount: 50\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.eql(50);\r",
									"});\r",
									"\r",
									"pm.test(\"Limit=NaN returns results with length 50\", () => {\r",
									"    pm.expect(resultData.length).to.eql(50);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"limit\", \"querty\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?country={{country}}&entity={{entity}}&limit={{limit}}&term={{searchTerm}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country}}"
								},
								{
									"key": "entity",
									"value": "{{entity}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "term",
									"value": "{{searchTerm}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Response datatype is object\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Status codes",
			"item": [
				{
					"name": "Status codes: empty request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?term=",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "term",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "country",
			"value": "SE"
		},
		{
			"key": "baseURLSearch",
			"value": "https://itunes.apple.com/search"
		},
		{
			"key": "baseURLLookup",
			"value": "https://itunes.apple.com/lookup",
			"type": "string"
		},
		{
			"key": "entity",
			"value": "musicTrack"
		},
		{
			"key": "searchTerm",
			"value": "abba"
		},
		{
			"key": "IDValid",
			"value": "909253"
		},
		{
			"key": "ISBNValid",
			"value": "9780316069359"
		}
	]
}