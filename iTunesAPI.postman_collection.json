{
	"info": {
		"_postman_id": "b41d7e2c-b5f6-421d-a881-b1ccc99f035d",
		"name": "DEV",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Smoke test",
			"item": [
				{
					"name": "Search: valid request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response includes search term\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"termSmoke\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Default resultCount is greater than 0\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.greaterThan(0);\r",
									"});\r",
									"pm.test(\"Default resultCount is less than 51\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.lessThan(51);\r",
									"});\r",
									"pm.test(\"Results length is greater than 0\", () => {\r",
									"    pm.expect(resultData.length).to.greaterThan(0);\r",
									"});\r",
									"pm.test(\"Results length is less than 51\", () => {\r",
									"    pm.expect(resultData.length).to.lessThan(51);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?term={{termSmoke}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "term",
									"value": "{{termSmoke}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup: valid request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"artistID is same as request parameter\", () => {\r",
									"    pm.expect(resultData[0].artistId).to.eql(pm.iterationData.get(\"artistId\"));\r",
									"});\r",
									"pm.test(\"Default resultCount is 1\", () => {\r",
									"    pm.expect(jsonData.resultCount).to.eql(1);\r",
									"});\r",
									"pm.test(\"Results length is 1\", () => {\r",
									"    pm.expect(resultData.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLLookup}}?id={{artistId}}",
							"host": [
								"{{baseURLLookup}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{artistId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup: bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response includes errorMessage\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"errorMessage\");\r",
									"});\r",
									"pm.test(\"errorMessage is as expected\", () => {\r",
									"    pm.expect(jsonData[\"errorMessage\"]).to.eql(\"Invalid value(s) for key(s): [itunesId]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLLookup}}?id={{badArtistId}}",
							"host": [
								"{{baseURLLookup}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{badArtistId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Response datatype is object\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"});",
							"pm.test(\"Response time is less than 1500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Limits",
			"item": [
				{
					"name": "Limits: within range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = jsonData.results;\r",
									"\r",
									"pm.test(\"resultCount is consistent with limit\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.eql(pm.iterationData.get(\"limit\"));\r",
									"});\r",
									"pm.test(\"Length is consistent with limit\", () => {\r",
									"    pm.expect(resultData.length).to.eql(pm.iterationData.get(\"limit\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?limit={{limit}}&term={{termSmoke}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country}}",
									"disabled": true
								},
								{
									"key": "entity",
									"value": "{{entity}}",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "term",
									"value": "{{termSmoke}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Limits: out of range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = jsonData.results;\r",
									"\r",
									"pm.test(\"Out of range limit returns resultCount over 0\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.greaterThan(0);\r",
									"});\r",
									"pm.test(\"Out of range limit returns resultCount less than 201\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.lessThan(201);\r",
									"});\r",
									"pm.test(\"Out of range limit returns results with length over 0\", () => {\r",
									"    pm.expect(resultData.length).to.greaterThan(0);\r",
									"});\r",
									"pm.test(\"Out of range limit returns results with length less than 201\", () => {\r",
									"    pm.expect(resultData.length).to.lessThan(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?country={{country}}&limit={{badLimit}}&term={{termSmoke}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country}}"
								},
								{
									"key": "entity",
									"value": "{{entity}}",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "{{badLimit}}"
								},
								{
									"key": "term",
									"value": "{{termSmoke}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response datatype is object\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Search: audiobook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"\r",
									"pm.test(\"artistName contains search term\", () => {\r",
									"    pm.expect(resultData[0].artistName).to.contain(pm.iterationData.get(\"termAudiobook\"));\r",
									"});\r",
									"pm.test(\"wrapperType is audiobook\", () => {\r",
									"    pm.expect(resultData[0].wrapperType).to.eql(pm.iterationData.get(\"wrapperTypeAudiobook\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Number of results are within limit\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.greaterThan(0);\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.lessThan(51);\r",
									"    pm.expect(resultData.length).to.greaterThan(0);\r",
									"    pm.expect(resultData.length).to.lessThan(51);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?media=audiobook&term={{termAudiobook}}&entity={{entityAudiobook}}&attribute={{attributeAudiobook}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "media",
									"value": "audiobook"
								},
								{
									"key": "term",
									"value": "{{termAudiobook}}"
								},
								{
									"key": "entity",
									"value": "{{entityAudiobook}}"
								},
								{
									"key": "attribute",
									"value": "{{attributeAudiobook}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search: ebook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"\r",
									"pm.test(\"artistName contains search term\", () => {\r",
									"    pm.expect(resultData[0].artistName).to.contain(pm.iterationData.get(\"termEbook\"));\r",
									"});\r",
									"pm.test(\"kind is ebook\", () => {\r",
									"    pm.expect(resultData[0].kind).to.eql(pm.iterationData.get(\"kindEbook\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Number of results are within limit\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.greaterThan(0);\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.lessThan(51);\r",
									"    pm.expect(resultData.length).to.greaterThan(0);\r",
									"    pm.expect(resultData.length).to.lessThan(51);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?media=ebook&term={{termEbook}}&entity={{entityEbook}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "media",
									"value": "ebook"
								},
								{
									"key": "term",
									"value": "{{termEbook}}"
								},
								{
									"key": "entity",
									"value": "{{entityEbook}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search: music",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"\r",
									"pm.test(\"artistName contains search term\", () => {\r",
									"    pm.expect(resultData[0].artistName).to.contain(pm.iterationData.get(\"termMusic\"));\r",
									"});\r",
									"pm.test(\"wrapperType is as expected\", () => {\r",
									"    pm.expect(resultData[0].wrapperType).to.eql(pm.iterationData.get(\"wrapperTypeMusic\"));\r",
									"});\r",
									"\r",
									"if (pm.iterationData.get(\"entityMusic\") == \"album\") { \r",
									"    pm.test(\"collectionType is Album \", () => {\r",
									"        pm.expect(resultData[0].collectionType).to.eql(pm.iterationData.get(\"collectionTypeMusic\"));\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Number of results are within limit\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.greaterThan(0);\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.lessThan(51);\r",
									"    pm.expect(resultData.length).to.greaterThan(0);\r",
									"    pm.expect(resultData.length).to.lessThan(51);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?media=music&term={{termMusic}}&entity={{entityMusic}}&attribute={{attributeMusic}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "media",
									"value": "music"
								},
								{
									"key": "term",
									"value": "{{termMusic}}"
								},
								{
									"key": "entity",
									"value": "{{entityMusic}}"
								},
								{
									"key": "attribute",
									"value": "{{attributeMusic}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search: movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"\r",
									"pm.test(\"trackName contains search term\", () => {\r",
									"    pm.expect(resultData[0].trackName).to.contain(pm.iterationData.get(\"termMovie\"));\r",
									"});\r",
									"pm.test(\"wrapperType is track\", () => {\r",
									"    pm.expect(resultData[0].wrapperType).to.eql(pm.iterationData.get(\"wrapperTypeMovie\"));\r",
									"});\r",
									"pm.test(\"kind is feature-movie \", () => {\r",
									"    pm.expect(resultData[0].kind).to.eql(pm.iterationData.get(\"kindMovie\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Number of results are within limit\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.greaterThan(0);\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.lessThan(51);\r",
									"    pm.expect(resultData.length).to.greaterThan(0);\r",
									"    pm.expect(resultData.length).to.lessThan(51);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?media=movie&term={{termMovie}}&entity={{entityMovie}}&attribute={{attributeMovie}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "media",
									"value": "movie"
								},
								{
									"key": "term",
									"value": "{{termMovie}}"
								},
								{
									"key": "entity",
									"value": "{{entityMovie}}"
								},
								{
									"key": "attribute",
									"value": "{{attributeMovie}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response datatype is object\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"});",
							"pm.test(\"Response time is less than 1500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Lookup",
			"item": [
				{
					"name": "Lookup: id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"\r",
									"pm.test(\"Default resultCount is 1\", () => {\r",
									"    pm.expect(jsonData.resultCount).to.eql(1);\r",
									"});\r",
									"pm.test(\"Results length is 1\", () => {\r",
									"    pm.expect(resultData.length).to.eql(1);\r",
									"});\r",
									"pm.test(\"artistID is same as request parameter\", () => {\r",
									"    pm.expect(resultData[0].artistId).to.eql(pm.iterationData.get(\"artistId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLLookup}}?id={{artistId}}",
							"host": [
								"{{baseURLLookup}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{artistId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup: amgArtistId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"\r",
									"pm.test(\"Default resultCount is 1\", () => {\r",
									"    pm.expect(jsonData.resultCount).to.eql(1);\r",
									"});\r",
									"pm.test(\"Results length is 1\", () => {\r",
									"    pm.expect(resultData.length).to.eql(1);\r",
									"});\r",
									"pm.test(\"amgArtistID is same as request parameter\", () => {\r",
									"    pm.expect(resultData[0].amgArtistId).to.eql(pm.iterationData.get(\"amgArtistId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLLookup}}?amgArtistId={{amgArtistId}}",
							"host": [
								"{{baseURLLookup}}"
							],
							"query": [
								{
									"key": "amgArtistId",
									"value": "{{amgArtistId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURLSearch",
			"value": "https://itunes.apple.com/search"
		},
		{
			"key": "baseURLLookup",
			"value": "https://itunes.apple.com/lookup",
			"type": "string"
		}
	]
}