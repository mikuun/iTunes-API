{
	"info": {
		"_postman_id": "b41d7e2c-b5f6-421d-a881-b1ccc99f035d",
		"name": "DEV",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Smoke test",
			"item": [
				{
					"name": "Search: valid request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Default resultCount is greater than 0\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.greaterThan(0);\r",
									"});\r",
									"pm.test(\"Default resultCount is less than 51\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.lessThan(51);\r",
									"});\r",
									"pm.test(\"Results length is greater than 0\", () => {\r",
									"    pm.expect(resultData.length).to.greaterThan(0);\r",
									"});\r",
									"pm.test(\"Results length is less than 51\", () => {\r",
									"    pm.expect(resultData.length).to.lessThan(51);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?term={{term}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "term",
									"value": "{{term}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup: valid request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Default resultCount is 1\", () => {\r",
									"    pm.expect(jsonData.resultCount).to.eql(1);\r",
									"});\r",
									"pm.test(\"Results length is 1\", () => {\r",
									"    pm.expect(resultData.length).to.eql(1);\r",
									"});\r",
									"pm.test(\"artistID is same as request parameter\", () => {\r",
									"    pm.expect(resultData[0].artistId).to.eql(pm.iterationData.get(\"artistId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLLookup}}?id={{artistId}}",
							"host": [
								"{{baseURLLookup}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{artistId}}",
									"description": "ID for ABBA"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup: bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response includes errorMessage\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"errorMessage\");\r",
									"});\r",
									"pm.test(\"errorMessage is as expected\", () => {\r",
									"    pm.expect(jsonData[\"errorMessage\"]).to.eql(\"Invalid value(s) for key(s): [itunesId]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLLookup}}?id={{badId}}",
							"host": [
								"{{baseURLLookup}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{badId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Response datatype is object\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"});",
							"pm.test(\"Response time is less than 1500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Limits",
			"item": [
				{
					"name": "Limits: within range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = jsonData.results;\r",
									"\r",
									"pm.test(\"resultCount is consistent with limit\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.eql(pm.iterationData.get(\"limit\"));\r",
									"});\r",
									"pm.test(\"Length is consistent with limit\", () => {\r",
									"    pm.expect(resultData.length).to.eql(pm.iterationData.get(\"limit\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?limit={{limit}}&term={{term}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country}}",
									"disabled": true
								},
								{
									"key": "entity",
									"value": "{{entity}}",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "term",
									"value": "{{term}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Limits: out of range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = jsonData.results;\r",
									"\r",
									"pm.test(\"Out of range limit returns resultCount over 0\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.greaterThan(0);\r",
									"});\r",
									"pm.test(\"Out of range limit returns resultCount less than 201\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.lessThan(201);\r",
									"});\r",
									"pm.test(\"Out of range limit returns results with length over 0\", () => {\r",
									"    pm.expect(resultData.length).to.greaterThan(0);\r",
									"});\r",
									"pm.test(\"Out of range limit returns results with length less than 201\", () => {\r",
									"    pm.expect(resultData.length).to.lessThan(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?country={{country}}&entity={{entity}}&limit={{badLimit}}&term={{term}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country}}"
								},
								{
									"key": "entity",
									"value": "{{entity}}"
								},
								{
									"key": "limit",
									"value": "{{badLimit}}"
								},
								{
									"key": "term",
									"value": "{{term}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response datatype is object\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Search & lookup with datafile",
			"item": [
				{
					"name": "Search datafile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"\r",
									"pm.test(\"Default resultCount is greater than 0\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.greaterThan(0);\r",
									"});\r",
									"pm.test(\"Default resultCount is less than 51\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.lessThan(51);\r",
									"});\r",
									"pm.test(\"Results length is greater than 0\", () => {\r",
									"    pm.expect(resultData.length).to.greaterThan(0);\r",
									"});\r",
									"pm.test(\"Results length is less than 51\", () => {\r",
									"    pm.expect(resultData.length).to.lessThan(51);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains search term\", () => {\r",
									"    pm.expect(resultData[0].artistName).to.include(pm.iterationData.get(\"artistName\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?term={{term}}&entity={{entity}}&attribute={{attribute}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "term",
									"value": "{{term}}"
								},
								{
									"key": "entity",
									"value": "{{entity}}"
								},
								{
									"key": "attribute",
									"value": "{{attribute}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup datafile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"\r",
									"pm.test(\"Default resultCount is 1\", () => {\r",
									"    pm.expect(jsonData.resultCount).to.eql(1);\r",
									"});\r",
									"pm.test(\"Results length is 1\", () => {\r",
									"    pm.expect(resultData.length).to.eql(1);\r",
									"});\r",
									"pm.test(\"artistID is same as request parameter\", () => {\r",
									"    pm.expect(resultData[0].artistId).to.eql(pm.iterationData.get(\"artistId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLLookup}}?id={{artistId}}",
							"host": [
								"{{baseURLLookup}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{artistId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response datatype is object\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"});",
							"pm.test(\"Response time is less than 1500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Search/lookup sequence",
			"item": [
				{
					"name": "Search with more parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response contains entity\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"entity\"));\r",
									"});\r",
									"pm.test(\"Response contains search term\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"term\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLSearch}}?entity={{entity}}&attribute={{attribute}}&term={{term}}",
							"host": [
								"{{baseURLSearch}}"
							],
							"query": [
								{
									"key": "entity",
									"value": "{{entity}}"
								},
								{
									"key": "attribute",
									"value": "{{attribute}}"
								},
								{
									"key": "term",
									"value": "{{term}}"
								},
								{
									"key": "term",
									"value": "donna+tartt",
									"disabled": true
								},
								{
									"key": "attribute",
									"value": "authorTerm",
									"disabled": true
								},
								{
									"key": "entity",
									"value": "ebook",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup iTunes Artist ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"const artistID = pm.globals.get(\"artistID\");\r",
									"const amgFound = resultData.filter((result) => result.amgArtistId);\r",
									"\r",
									"pm.test(\"Limit 5 returns resultCount: 6 (5 songs + 1 artist)\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.eql(6);\r",
									"});\r",
									"pm.test(\"Limit 5 returns results with length 6 (5 songs + 1 artist)\", () => {\r",
									"    pm.expect(resultData.length).to.eql(6);\r",
									"});\r",
									"pm.test(\"Correct artist ID is returned\", () => {\r",
									"  pm.expect(resultData[0].artistId).to.eql(artistID);\r",
									"});\r",
									"pm.test(\"WrapperType for first object is artist\", () => {\r",
									"  pm.expect(resultData[0].wrapperType).to.eql(\"artist\");\r",
									"});\r",
									"pm.test(\"WrapperType for second object is track\", () => {\r",
									"  pm.expect(resultData[1].wrapperType).to.eql(\"track\");\r",
									"});\r",
									"pm.test(\"Country is SWE\", () => {\r",
									"    pm.expect(resultData[1].country).to.eql(\"SWE\");\r",
									"});\r",
									"pm.test(\"Currency is SEK\", () => {\r",
									"    pm.expect(resultData[3].currency).to.eql(\"SEK\");\r",
									"});\r",
									"pm.test(\"Kind is song\", () => {\r",
									"        pm.expect(resultData[2].kind).to.eql(\"song\");\r",
									"    });\r",
									"\r",
									"if (amgFound.length == 0) {\r",
									"    postman.setNextRequest(\"Search for artist and save variable artistID\");\r",
									"} else {\r",
									"    /* Set AMG Artist ID variable */\r",
									"    pm.globals.set(\"amgID\", resultData[0].amgArtistId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLLookup}}?id={{artistID}}&entity=song&limit=5&sort=top&country=SE",
							"host": [
								"{{baseURLLookup}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{artistID}}"
								},
								{
									"key": "entity",
									"value": "song"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "sort",
									"value": "top"
								},
								{
									"key": "country",
									"value": "SE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup AMG Artist ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = pm.response.json().results;\r",
									"const amgID = pm.globals.get(\"amgID\");\r",
									"\r",
									"pm.test(\"Limit 1 returns resultCount: 2 (1 album + 1 artist)\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.eql(2);\r",
									"});\r",
									"pm.test(\"Limit 1 returns results with length 2 (1 album + 1 artist)\", () => {\r",
									"    pm.expect(resultData.length).to.eql(2);\r",
									"});\r",
									"pm.test(\"Correct AMG artist ID is returned\", () => {\r",
									"  pm.expect(resultData[0].amgArtistId).to.eql(amgID);\r",
									"});\r",
									"pm.test(\"WrapperType for first object is artist\", () => {\r",
									"  pm.expect(resultData[0].wrapperType).to.eql(\"artist\");\r",
									"});\r",
									"pm.test(\"WrapperType for second object is collection\", () => {\r",
									"  pm.expect(resultData[1].wrapperType).to.eql(\"collection\");\r",
									"});\r",
									"pm.test(\"collectionType is Album\", () => {\r",
									"    pm.expect(resultData[1].collectionType).to.eql(\"Album\");\r",
									"});\r",
									"pm.test(\"Country is USA\", () => {\r",
									"    pm.expect(resultData[1].country).to.eql(\"USA\");\r",
									"});\r",
									"pm.test(\"Currency is USD\", () => {\r",
									"    pm.expect(resultData[1].currency).to.eql(\"USD\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLLookup}}?amgArtistId={{amgID}}&entity=album&limit=1&sort=recent",
							"host": [
								"{{baseURLLookup}}"
							],
							"query": [
								{
									"key": "amgArtistId",
									"value": "{{amgID}}"
								},
								{
									"key": "entity",
									"value": "album"
								},
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "sort",
									"value": "recent"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response datatype is object\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"});",
							"pm.test(\"Response time is less than 1500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURLSearch",
			"value": "https://itunes.apple.com/search"
		},
		{
			"key": "baseURLLookup",
			"value": "https://itunes.apple.com/lookup",
			"type": "string"
		}
	]
}