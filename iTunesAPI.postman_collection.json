{
	"info": {
		"_postman_id": "a13ab280-1a4e-4d87-82d9-a28212867894",
		"name": "iTunes API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Limits",
			"item": [
				{
					"name": "Verify limits: Minimum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = jsonData.results;\r",
									"\r",
									"pm.test(\"Limit=1 returns resultCount: 1\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Limit=1 returns results with length 1\", () => {\r",
									"    pm.expect(resultData.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"limit\", 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}?country={{country}}&entity={{entity}}&limit={{limit}}&term={{searchTerm}}",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country}}"
								},
								{
									"key": "entity",
									"value": "{{entity}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "term",
									"value": "{{searchTerm}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify limits: Maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = jsonData.results;\r",
									"\r",
									"pm.test(\"Limit=200 returns resultCount: 200\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limit=200 returns results with length 200\", () => {\r",
									"    pm.expect(resultData.length).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"limit\", 200);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}?country={{country}}&entity={{entity}}&limit={{limit}}&term={{searchTerm}}",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country}}"
								},
								{
									"key": "entity",
									"value": "{{entity}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "term",
									"value": "{{searchTerm}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify limits: Over range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = jsonData.results;\r",
									"\r",
									"pm.test(\"Limit=250 returns resultCount: 200\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limit=250 returns results with length 200\", () => {\r",
									"    pm.expect(resultData.length).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"limit\", 250);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}?country={{country}}&entity={{entity}}&limit={{limit}}&term={{searchTerm}}",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country}}"
								},
								{
									"key": "entity",
									"value": "{{entity}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "term",
									"value": "{{searchTerm}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify limits: Not a number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const resultData = jsonData.results;\r",
									"\r",
									"pm.test(\"Limit=NaN returns resultCount: 50\", () => {\r",
									"    pm.expect(jsonData[\"resultCount\"]).to.eql(50);\r",
									"});\r",
									"\r",
									"pm.test(\"Limit=NaN returns results with length 50\", () => {\r",
									"    pm.expect(resultData.length).to.eql(50);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"limit\", \"querty\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}?country={{country}}&entity={{entity}}&limit={{limit}}&term={{searchTerm}}",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "country",
									"value": "{{country}}"
								},
								{
									"key": "entity",
									"value": "{{entity}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "term",
									"value": "{{searchTerm}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Response datatype is object\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Status codes",
			"item": [
				{
					"name": "Status codes: empty request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}?term=",
							"host": [
								"{{baseURL}}"
							],
							"query": [
								{
									"key": "term",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search musicTrack in Sweden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"const resultData = jsonData.results[\"0\"];\r",
							"\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test content of the response\", () => {\r",
							"  pm.expect(resultData[\"wrapperType\"]).to.eql(\"track\");\r",
							"  pm.expect(resultData[\"kind\"]).to.eql(\"song\");\r",
							"  pm.expect(resultData[\"previewUrl\"]).to.contain(\".m4a\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify: limit 1 returns 1 result\", () => {\r",
							"    pm.globals.set(\"limit\", 1);\r",
							"    pm.expect(jsonData[\"resultCount\"]).to.eql(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}?country=SE&entity=musicTrack&limit={{limit}}&term=abba",
					"host": [
						"{{baseURL}}"
					],
					"query": [
						{
							"key": "country",
							"value": "SE"
						},
						{
							"key": "entity",
							"value": "musicTrack"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "term",
							"value": "abba"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "country",
			"value": "SE"
		},
		{
			"key": "baseURL",
			"value": "https://itunes.apple.com/search"
		},
		{
			"key": "entity",
			"value": "musicTrack"
		},
		{
			"key": "searchTerm",
			"value": "abba"
		}
	]
}